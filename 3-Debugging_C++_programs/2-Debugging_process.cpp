/*
===========================================
        TUTORIAL: The Debugging Process
===========================================

Cuando un programa compila bien pero da un
resultado incorrecto, no se trata de un error
de sintaxis, sino de un **error sem√°ntico** o
**l√≥gico**.

El proceso general de depuraci√≥n consta de 6 pasos:

1. Encontrar la causa ra√≠z del problema.
2. Asegurarse de entender por qu√© ocurre.
3. Determinar c√≥mo arreglarlo.
4. Aplicar la correcci√≥n en el c√≥digo.
5. Retestar para confirmar que el problema
   se resolvi√≥.
6. Retestar para asegurarse de que no se
   introdujeron nuevos errores.

Ejemplo: funci√≥n `add` que deber√≠a sumar,
pero resta.
===========================================
*/

#include <iostream>

// --------------------------------------
// Paso 1: C√≥digo con un bug (funci√≥n mal definida)
// --------------------------------------
int add(int x, int y) {
    return x - y; // ‚ùå Error: deber√≠a sumar, no restar
}

int main() {
    std::cout << "5 + 3 = " << add(5, 3) << '\n';
    // Esperado: 8
    // Obtenido: 2

    return 0;
}

/*
===========================================
        PROCESO DE DEPURACI√ìN
===========================================

üîç 1. Encontrar la causa ra√≠z:
    - La salida incorrecta ocurre en main.
    - La funci√≥n `add(5, 3)` devuelve 2 en vez de 8.
    - Inputs (5 y 3) son correctos.
    - El error debe estar dentro de la funci√≥n `add`.
    - L√≠nea sospechosa: `return x - y;`

ü§î 2. Entender el problema:
    - La funci√≥n que deber√≠a sumar, est√° restando.
    - El operador usado es `-` en lugar de `+`.

üõ†Ô∏è 3. Determinar el arreglo:
    - Cambiar el operador de resta por el de suma.

‚úèÔ∏è 4. Aplicar la correcci√≥n:
    int add(int x, int y) {
        return x + y; // ‚úÖ ahora s√≠ suma
    }

üß™ 5. Retestar:
    - Ejecutar de nuevo el programa.
    - Salida: "5 + 3 = 8"
    - Resultado correcto.

üîÅ 6. Retest adicional:
    - Probar con otros valores: `add(10, 7) = 17`.
    - Verificar que no se introdujeron nuevos errores.

===========================================
          BUENAS PR√ÅCTICAS DE DEPURACI√ìN
===========================================

‚úÖ Escribe poco c√≥digo y pru√©balo seguido.
‚úÖ Usa mensajes en consola para verificar entradas y salidas.
‚úÖ Divide el problema: prueba cada funci√≥n por separado.
‚úÖ Revisa primero las l√≠neas donde se imprime el resultado.
‚úÖ Usa un debugger paso a paso para seguir la ejecuci√≥n.
‚úÖ Aseg√∫rate de entender el "por qu√©" del error, no s√≥lo de corregirlo.
‚úÖ Despu√©s de reparar, prueba casos adicionales para confirmar.

===========================================
*/
