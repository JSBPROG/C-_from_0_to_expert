#include <iostream>

// ============================================================
// 1. Funci√≥n void b√°sica
// ============================================================
// Una funci√≥n puede ejecutar c√≥digo sin devolver un valor.
// "void" indica que no regresa nada al llamador.
void printHi()
{
    std::cout << "Hi" << '\n';

    // No necesitamos "return".
    // Al final de la funci√≥n, el control vuelve autom√°ticamente al caller.
}

// ============================================================
// 2. Funci√≥n void con return vac√≠o
// ============================================================
// Un return vac√≠o dentro de una funci√≥n void sirve para terminarla antes.
// Pero ponerlo al final es redundante.
void printHello()
{
    std::cout << "Hello" << '\n';

    return; // Esto es opcional y redundante aqu√≠.
}

// ============================================================
// 3. Void functions no pueden usarse donde se espera un valor
// ============================================================
// Ejemplo de error de compilaci√≥n si intentamos "usar el retorno".
void printWorld()
{
    std::cout << "World" << '\n';
}

// ============================================================
// 4. Comparaci√≥n entre funci√≥n void y funci√≥n con retorno
// ============================================================
void returnNothing() // no retorna nada
{
}

int returnFive() // retorna un entero
{
    return 5;
}

// ============================================================
// 5. Error: intentar devolver un valor desde void
// ============================================================
/*
void badVoidFunction()
{
    std::cout << "In badVoidFunction()" << '\n';

    return 5; // ‚ùå ERROR: no se puede devolver un valor en una funci√≥n void
}
*/

// ============================================================
// MAIN
// ============================================================
int main()
{
    std::cout << "=== EJEMPLO 1: Llamar a funcion void ===\n";
    printHi(); // imprime "Hi", no devuelve nada

    std::cout << "\n=== EJEMPLO 2: Return vacio en void ===\n";
    printHello(); // imprime "Hello"

    std::cout << "\n=== EJEMPLO 3: Uso incorrecto de void ===\n";
    printWorld(); // ‚úÖ v√°lido
    // std::cout << printWorld(); // ‚ùå ERROR: printWorld() no devuelve nada

    std::cout << "\n=== EJEMPLO 4: Comparando void y no-void ===\n";
    returnNothing();   // ‚úÖ podemos llamar aunque no devuelva nada
    returnFive();      // ‚úÖ podemos ignorar el retorno
    std::cout << returnFive() << '\n'; // ‚úÖ usamos el retorno (imprime 5)
    // std::cout << returnNothing(); // ‚ùå ERROR: no devuelve valor

    // Ejemplo 5 ya est√° comentado porque no compila.

    return 0;
}

/*
============================================================
üìå NOTAS Y BUENAS PR√ÅCTICAS
============================================================

1. Una funci√≥n void se usa cuando queremos ejecutar c√≥digo
   por su efecto (ej. imprimir en pantalla) y no necesitamos
   devolver un valor.

2. No pongas "return;" al final de una funci√≥n void
   ‚Üí es redundante (la funci√≥n regresa sola).

3. S√≠ puedes usar "return;" vac√≠o en mitad de una funci√≥n void
   si quieres terminarla antes de llegar al final.

4. No intentes usar una funci√≥n void en un contexto
   que espera un valor (ej. dentro de std::cout, en una suma, etc.).

5. Una funci√≥n void no puede devolver un valor ‚Üí hacerlo es
   un error de compilaci√≥n.

6. Puedes llamar tanto funciones void como funciones que
   retornan valor en solitario (ignorando el retorno).
   Ej: returnFive();  // ok, aunque no uses el 5

============================================================
*/
